@* Due to share database and development purposes, copied from sav template*@

@model CategoryModel
@using Nop.Core.Domain.Common;
@using Nop.Core.Domain.Seo;
@using Nop.Core.Infrastructure;
@using Nop.Web.Models.Catalog;
@using Nop.Web.Extensions;
@{


  Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
  Html.AddMetaDescriptionParts(Model.MetaDescription);
  Html.AddMetaKeywordParts(Model.MetaKeywords);

  var canonicalUrlsEnabled = EngineContext.Current.Resolve<SeoSettings>().CanonicalUrlsEnabled;
  if (canonicalUrlsEnabled)
  {
      var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, this.Request.Url.Scheme);
      Html.AddCanonicalUrlParts(categoryUrl);
  }
  string absolutepath = HttpContext.Current.Request.Url.AbsolutePath;
  var styleDivCenterDesktop = "position: absolute; top: 0; left: 0; height: 100%; width: 100%; right: 0; bottom: 0;";
  var styleContentCenterDeskopComingSoon = "font-size: 40px; color: white; display: flex; justify-content: center; align-items: center; height: 100%;";

  DateTime d1 = Model.PreviewEndDateTimeUtc.Value;
  DateTime d3 = Model.PreviewStartDateTimeUtc.Value;
  DateTime d2 = DateTime.Now;
  bool open = d1 > d2 ? true : false;
  string date1 = d1.ToString("yyyyMMddHHmmss"); 
  string date2 = d3.ToString("yyyyMMddHHmmss"); 

  @* List<string> FlashSale = new List<string>();
  FlashSale.Add("08:00");
  FlashSale.Add("12:00"); *@
}

  <div class="row d-none d-md-block carousel" style="margin: 15px 0; margin-bottom: 0; position: relative;"> 
    <img class="d-block w-100" src="@String.Format("/Content/Images/uploaded/categories/coming-soon.jpg")"> 
    <div class="text-center" style="@styleDivCenterDesktop">
      <h1 style="@styleContentCenterDeskopComingSoon">@Model.Name</h1>
    </div>
  </div>

  <div class="row d-block d-md-none carousel" style="position: relative;"> 
    <img style="left: 50%; position: relative; transform: translateX(-50%);" class="d-block" src="@String.Format("/Content/Images/uploaded/categories/coming-soon.jpg")"> 
    <div class="text-center" style="@styleDivCenterDesktop">
      <h1 style="@styleContentCenterDeskopComingSoon">@Model.Name</h1>
    </div>
  </div>

  <div class="row p-0 m-0 mb-5" style="background-color: #D8C7BD; width: 120%; margin-left: -10% !important;">
    <div class="col-12 col-md-12 col-sm-12 d-flex justify-content-center align-items-center" style="height: 55px;"> 
      <h2 style="color: white; font-size: 20px;" id="demo"/>
    </div>
  </div>
  @if (Model.Products.Count > 0 && open)
  {
    @Html.Partial("_FilterProduct")
    
    <hr class="d-block d-md-none" />
    <div style="padding: 0 5% 0; position: relative; background-color: white;">
      <div class="row" id="sortnormal">
        @{
          var productnormal = Model.Products;
          var index_productnormal = 0;
          foreach (var item in productnormal)
          {
            var colCss = "col-6 col-sm-6 col-md-3 col-lg-3 p-1";
            <div data-number="@index_productnormal" class="@colCss catalog-line allproducts" id="normal-@item.Id" style="text-transform: uppercase;" data-new="@item.MarkAsNew">
              @Html.Partial("_ProductBox", item)
            </div>
            index_productnormal++; 
          }
        }
      </div>

      <div class="row" style="display: none;" id="sortascending">
        @{
          var productasc = Model.Products.OrderBy(x => x.ProductPrice.PriceValue);
          var index_productasc = 0;
          foreach (var item in productasc)
          {
            var colCss = "col-6 col-sm-6 col-md-3 col-lg-3 p-1";
            <div data-number="@index_productasc" class="@colCss catalog-line allproducts" id="asc-@item.Id" style="text-transform: uppercase;" data-new="@item.MarkAsNew">
              @Html.Partial("_ProductBox", item)
            </div>
            index_productasc++; 
          }
        }
      </div>

      <div class="row" style="display: none;" id="sortdescending">
        @{
          var productdsc = Model.Products.OrderByDescending(x => x.ProductPrice.PriceValue);
          var index_productdsc = 0;
          foreach (var item in productdsc)
          {
            var colCss = "col-6 col-sm-6 col-md-3 col-lg-3 p-1";
            <div data-number="@index_productdsc" class="@colCss catalog-line allproducts" id="desc-@item.Id" style="text-transform: uppercase;" data-new="@item.MarkAsNew">
              @Html.Partial("_ProductBox", item)
            </div>
            index_productdsc++; 
          }
        }
      </div>

      <div class="row" style="display: none;" id="sortaz">
        @{
          var productaz = Model.Products.OrderBy(x => x.Name).ToList();
          var index_productaz = 0;
          foreach (var item in productaz)
          {
            var colCss = "col-6 col-sm-6 col-md-3 col-lg-3 p-1";
            <div data-number="@index_productaz" class="@colCss catalog-line allproducts" id="az-@item.Id" style="text-transform: uppercase;" data-new="@item.MarkAsNew">
              @Html.Partial("_ProductBox", item)
            </div>
            index_productaz++; 
          }
        }
      </div>
      
      <div class="row" style="display: none;" id="sortza">
        @{
          var productza = Model.Products.OrderByDescending(x => x.Name).ToList();
          var index_productza = 0;
          foreach (var item in productza)
          {
            var colCss = "col-6 col-sm-6 col-md-3 col-lg-3 p-1";
            <div data-number="@index_productza" class="@colCss catalog-line allproducts" id="za-@item.Id" style="text-transform: uppercase;" data-new="@item.MarkAsNew">
              @Html.Partial("_ProductBox", item)
            </div>
            index_productza++; 
          }
        }
      </div>

      <div class="row mt-5" style="display: none;" id="emptyproduct">
        <div class="col-12 col-md-12 col-sm-12 text-center">
          <h2>We're still preparing the products. Please stay tuned.</h2>
        </div>
      </div>
    </div>
  } else {
    <div class="row" style="padding: 10% 5% 0; position: relative; background-color: white;">
      <div class="col-main-slim text-center" style="max-height: 200px !important;"><h2>We're still preparing the products. Please stay tuned.</h2></div>
    </div>
  }


@*sticky thumbnail*@
<script src="~/Themes/v1/Scripts/jquery.sticky.js"></script>
<script>
	$('.nav-item a').click(function(){
    $(this).tab('show')
    var name = $(this).attr('href').substr(1)
    $('#pills-tabContent2').children().each(function(el) {
      if (name === $(this).attr('id')) {
        $(this).addClass('active show')
      } else {
        $(this).removeClass('active show')
      }
    })
  })
  //console.log(`PRODUCT CATEGORY`);
	var model = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
	//console.log(model.Products);

  var arr = [null, null, null, null, null, null, null], arr_multi_color = [], arr_multi_brand = [];
  var all_arr = [], arr_none_cat = [], arr_none_color = [], arr_none_brand = [],arr_none_avail = [], arr_none_price = [], arr_none_new = [];
  
  $("[name=sortpageview]").click(function(){
    var id = String(this.id, 10);
    arr[4] = id;
    startfilter();
    all_arr = [];
    $("[name=sortpageview]").each(function() {
      var normal_id = String(this.id, 10);
      if (normal_id == id) {
        $(this).css("cssText", "color: #E1C2A4 !important");
      } else {
        $(this).css("cssText", "color: #525252 !important");
      }
    });
  });
  
  $("[name=sortcatalog]").click(function(){
    var id = String(this.id, 10);
    arr[5] = id;
    startfilter();
    all_arr = [];
    $("[name=sortcatalog]").each(function() {
      var normal_id = String(this.id, 10);
      if (normal_id == id) {
        $(this).css("cssText", "color: #E1C2A4 !important");
      } else {
        $(this).css("cssText", "color: #525252 !important");
      }
    });
  });

  // remove sort product
  $('#removesort').click(function(){
    if (document.querySelector('input[name="sortcatalog"]:checked')) {
      document.querySelector('input[name="sortcatalog"]:checked').checked = false;
      displaysortproduct("flex", "none", "none", "none", "none")
      arr[5] = null
      removesortnew();
    }
    startfilter();
  });

  function removesortnew () {
    //remove display using id
     if (arr_none_new.length > 0) {
      for (let i = 0; i < arr_none_new.length; i++) {
        let temp = arr_none_new[i];
        displayproduct(temp, "block");
      }
      arr_none_new = [];
     }
  }
  
  function getallarray () {
    // get all arr
    $(".allproducts").each(function() {
      var normal_id = parseInt(this.id.replace("normal-", ""), 10);
      if (normal_id) {
        all_arr.push(parseInt(normal_id))
      }
    });
  }

  function startfilter () {
    getallarray();

    var ih = 0; 
    var il = 0; 
    var ia= 0; 
    var iz = 0; 
    var inr = 0; 
    var iw = 0;
    // start to filter the product
    $(".allproducts").each(function(index) {
      var product_id =  parseInt($(this).attr("id").replace("normal-", ""), 10);
      var page_view_number = $(this).attr("data-number");

      if (product_id) {
        for (let i = 0; i < arr.length; i++) {

          if (i == 4 && arr[i] && !arr[5]) {
            displaypageview(arr[4], inr);
            inr++;
          }
          // filter logic hightolow
          if (i == 5 && arr[i]) {
            if (arr[i].length > 0) {
              if (arr[i] == "hightolow") {
                displaysortproduct("none", "none", "flex", "none")
                removesortnew();
                displaypageview(arr[4], ih);
                ih++;
              } else if (arr[i] == "lowtohigh") {
                displaysortproduct("none", "flex", "none", "none", "none")
                displaypageview(arr[4], il);
                il++;
              } else if (arr[i] == "az") {
                displaysortproduct("none", "none", "none", "flex", "none")
                removesortnew();
                displaypageview(arr[4], ia);
                ia++;
              } else if (arr[i] == "za") {
                displaysortproduct("none", "none", "none", "none", "flex")
                removesortnew();
                displaypageview(arr[4], iz);
                iz++;
              } else if (arr[i] == "whatnew") {
                var marknew = $(this).attr("data-new");
                if (marknew == "True") {
                  if (all_arr.find(element => parseInt(element) == parseInt(product_id))) {
                    if (arr[4] == `all` || !arr[4]) {
                      displayproduct(product_id, "block");
                    } else if (arr[4]){
                      displaypageview(arr[4], product_id, true, iw);
                    }
                  }
                  iw++;
                } else {
                  if (all_arr.find(element => parseInt(element) == parseInt(product_id))) {
                    all_arr = all_arr.filter(id => parseInt(id) !== parseInt(product_id));
                    arr_none_new.push(parseInt(product_id));
                    arr_none_new = [...new Set(arr_none_new)];
                    displayproduct(product_id, "none");
                  }
                }
              }
            }
          } 
        }
      }
    });

    if (all_arr.length == 0) {
      $('#emptyproduct').css("display", "block");
    } else {
      $('#emptyproduct').css("display", "none");
    }
  }

  function displaysortproduct (normal, asc, desc, az, za) {
    $("#sortnormal").css("display", normal);
    $("#sortascending").css("display", asc);
    $("#sortdescending").css("display", desc);
    $("#sortaz").css("display", az);
    $("#sortza").css("display", za);
  }
  
  function displayproductpageview (number, value) {
    $('div[data-number='+number+']').css("display", value);
  }
  
  function displaypageview(page, index, newin, newindex) {
    if (page) {
      if (page == "all" && !newin) displayproductpageview(index, "block");
      else if (index < parseInt(page) && !newin) displayproductpageview(index, "block");
      else if (!newin) displayproductpageview(index, "none");

      if (page == "all" && newin) displayproduct(index, "block");
      else if (newindex < parseInt(page) && newin) displayproduct(index, "block");
      else if (newin) displayproduct(index, "none");
      
    }
  }

  function displayproduct (id, value) {
    $('#normal-'+id).css("display", value);
    $('#asc-'+id).css("display", value);
    $('#desc-'+id).css("display", value);
    $('#az-'+id).css("display", value);
    $('#za-'+id).css("display", value);
  }

  function blockproduct (data) {
    for (let i = 0; i < data.length; i++) {
      let temp = data[i];
      displayproduct(temp, "block");
    }
  }

	//console.log(`COMINGD SOON`);
	var model = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
	//console.log(model);
  let today = new Date();
  let date_today = new Date(`${today.getFullYear()}, ${today.getMonth()}, ${today.getDate()}`);
  var x = setInterval(function() {
    let data = model;

    let start_day = data && data.PreviewStartDateTimeUtc ? new Date(data.PreviewStartDateTimeUtc).getDate() : null;
    let start_month = data && data.PreviewStartDateTimeUtc ? new Date(data.PreviewStartDateTimeUtc).getMonth() : null;
    let start_year = data && data.PreviewStartDateTimeUtc ? new Date(data.PreviewStartDateTimeUtc).getFullYear() : null;
    
    let end_day = data && data.PreviewEndDateTimeUtc ? new Date(data.PreviewEndDateTimeUtc).getDate() : null;
    let end_month = data && data.PreviewEndDateTimeUtc ? new Date(data.PreviewEndDateTimeUtc).getMonth() : null;
    let end_year = data && data.PreviewEndDateTimeUtc ? new Date(data.PreviewEndDateTimeUtc).getFullYear() : null;

    let start_date = data && data.PreviewStartDateTimeUtc ? data.PreviewStartDateTimeUtc : null;
    let end_date = data && data.PreviewEndDateTimeUtc ? data.PreviewEndDateTimeUtc : null;
    let only_start_date = data && data.PreviewStartDateTimeUtc ? new Date(`${start_year}, ${start_month}, ${start_day}`) : null;
    let only_end_date = data && data.PreviewEndDateTimeUtc ? new Date(`${end_year}, ${end_month}, ${end_day}`) : null;

    var countDownDate = new Date(end_date).getTime();
    var countDownStartDate = new Date(start_date).getTime();
    var now = new Date().getTime();
      
    var distance = countDownDate - now;
    var distance_start = countDownStartDate - now;
      
    var days = Math.floor(distance / (1000 * 60 * 60 * 24));
    var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    var seconds = Math.floor((distance % (1000 * 60)) / 1000);

    var days_start = Math.floor(distance_start / (1000 * 60 * 60 * 24));
    var hours_start = Math.floor((distance_start % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    var minutes_start = Math.floor((distance_start % (1000 * 60 * 60)) / (1000 * 60));
    var seconds_start = Math.floor((distance_start % (1000 * 60)) / 1000);

    let result_time = `${days} : ${hours} : ${minutes} : ${days} : ${seconds}`;
    let result_time_start = `${days_start} : ${hours_start} : ${minutes_start} : ${seconds_start}`;

    if (data && distance < 0 && distance_start < 0) {
      clearInterval(x);
      @* document.getElementById("demo").innerHTML = "Ended"; *@
    } else {
      if (data && distance_start > 0) {
        document.getElementById("demo").innerHTML = "Available in  " + result_time_start ;
        for (let i = 0; i < model.Products.length; i++) {
          $("#price-cs-"+model.Products[i].Id).text("IDR ???.000");
        }
      } else if (data && distance_start < 0){
        document.getElementById("demo").innerHTML = "Ends in  " + result_time;
        for (let i = 0; i < model.Products.length; i++) {
          $("#price-cs-"+model.Products[i].Id).text(model.Products[i].ProductPrice.Price);
        }
      } 
    }
  }, 1000);
</script>


